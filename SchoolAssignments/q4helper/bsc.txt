# Setup
c-->from importlib import reload
c-->import q4solution
c-->reload(q4solution)
c-->from goody import irange
c-->from predicate import is_prime
c-->from q4solution import hide, primes, running_count, stop_when, yield_and_skip, windows, alternate, myzip, Ordered

# Test running_count
e-->''.join([str(v) for v in running_count(hide('bananastand'),lambda x : x in 'aeiou')])-->01122333444
e-->''.join([str(v) for v in running_count(primes(100),lambda x : x%10==3)])-->0111122233333445555566777
e-->''.join([str(v) for v in running_count(primes(100),lambda x : x%10==7)])-->0001112222233344445555556

# Test stop_when
e-->''.join([str(v) for v in stop_when(hide('abcdefghijk'), lambda x : x >='d')])-->abc
e-->' '.join([str(v) for v in stop_when(primes(50), lambda x : x >=50 and x%10==1)])-->2 3 5 7 11 13 17 19 23 29 31 37 41 43 47

# Test yield_and_skip
==-->[v for v in yield_and_skip(hide([1, 2, 1, 3, 'a', 'b', 2, 5, 'c', 1, 2, 3, 8, 'x', 'y', 'z', 2]))]-->[1, 1, 'a', 'b', 2, 1, 3, 'z', 2]
==-->[v for v in yield_and_skip(hide(['a', 'b', 1, 2, 3, 'c', 'd', 1, 2, 8, 'x', 'y', 'z', 2]))]-->['a', 'b', 1, 3, 2, 'y', 'z', 2]

# Test windows
==-->[v for v in windows(hide('abcdefghijk'),4,2)]-->[['a', 'b', 'c', 'd'], ['c', 'd', 'e', 'f'], ['e', 'f', 'g', 'h'], ['g', 'h', 'i', 'j']]
==-->[v for v in windows(hide('abcdefghijk'),4,3)]-->[['a', 'b', 'c', 'd'], ['d', 'e', 'f', 'g'], ['g', 'h', 'i', 'j']]
==-->[v for v in windows(hide('abcdefghijk'),3,2)]-->[['a', 'b', 'c'], ['c', 'd', 'e'], ['e', 'f', 'g'], ['g', 'h', 'i'], ['i', 'j', 'k']]

# Test alternate
e-->''.join([str(v) for v in alternate('abcde','fg','hijk')])-->afhbgic
e-->''.join([str(v) for v in alternate(hide('abcde'),hide('fg'),hide('hijk'))])-->afhbgic
e-->''.join([str(v) for v in alternate(hide('fg'),hide('hijk'),hide('abcde'))])-->fhagib
e-->''.join([str(v) for v in alternate(primes(20), hide('fghi'),hide('jk'))])-->2fj3gk5h

# Test myzip
==-->[v for v in myzip(hide('abcde'), hide('fg'),hide('hijk'))]-->[('a', 'f', 'h'), ('b', 'g', 'i'), ('c', None, 'j'), ('d', None, 'k'), ('e', None, None)]
==-->[v for v in myzip(primes(20), hide('fghi'),hide('jk'))]-->[(2, 'f', 'j'), (3, 'g', 'k'), (5, 'h', None), (7, 'i', None), (11, None, None), (13, None, None), (17, None, None), (19, None, None)]

# Test Ordered
c-->s = {1, 2, 4, 8, 16}
c-->i = iter(Ordered(s))
==-->[next(i), next(i), s.remove(8), next(i), next(i), s.add(32), next(i)]-->[1, 2, None, 4, 16, None, 32]
c-->s = {1, 2, 4, 8, 16}
c-->i = iter(Ordered(s))
==-->[next(i), next(i), next(i), s.add(3), next(i), s.add(10), s.add(32), next(i), next(i), next(i)]-->[1, 2, 4, None, 8, None, None, 10, 16, 32]
==-->s-->{1, 2, 3, 4, 8, 10, 16, 32}
c-->s = {1, 2, 4, 8, 16}
c-->i = iter(Ordered(s))
==-->[next(i), s.remove(2), s.remove(4), s.remove(8), next(i)]-->[1, None, None, None, 16]
c-->s = {1, 2, 4, 8, 16}
c-->i = iter(Ordered(s))
==-->[next(i), s.remove(2), next(i), s.remove(4), s.remove(8), next(i)]-->[1, None, 4, None, None, 16]
==-->s-->{1, 16}
c-->s = set()
c-->i = iter(Ordered(s))
^-->next(i)-->StopIteration